//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var GetRequest = module.exports.GetRequest = function(args) {
  this.key = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
GetRequest.prototype = {};
GetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 2);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetResponse = module.exports.GetResponse = function(args) {
  this.value = null;
  this.found = null;
  this.error = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field found is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
GetResponse.prototype = {};
GetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetResponse.prototype.write = function(output) {
  output.writeStructBegin('GetResponse');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetRequest = module.exports.SetRequest = function(args) {
  this.key = null;
  this.value = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
SetRequest.prototype = {};
SetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetRequest.prototype.write = function(output) {
  output.writeStructBegin('SetRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetResponse = module.exports.SetResponse = function(args) {
  this.success = null;
  this.error = null;
  this.error_code = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error_code !== undefined && args.error_code !== null) {
      this.error_code = args.error_code;
    }
  }
};
SetResponse.prototype = {};
SetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetResponse.prototype.write = function(output) {
  output.writeStructBegin('SetResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.STRING, 3);
    output.writeString(this.error_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteRequest = module.exports.DeleteRequest = function(args) {
  this.key = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
DeleteRequest.prototype = {};
DeleteRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteRequest.prototype.write = function(output) {
  output.writeStructBegin('DeleteRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 2);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteResponse = module.exports.DeleteResponse = function(args) {
  this.success = null;
  this.error = null;
  this.error_code = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error_code !== undefined && args.error_code !== null) {
      this.error_code = args.error_code;
    }
  }
};
DeleteResponse.prototype = {};
DeleteResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteResponse.prototype.write = function(output) {
  output.writeStructBegin('DeleteResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.STRING, 3);
    output.writeString(this.error_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRangeRequest = module.exports.GetRangeRequest = function(args) {
  this.start_key = null;
  this.end_key = null;
  this.limit = 1000;
  this.column_family = null;
  if (args) {
    if (args.start_key !== undefined && args.start_key !== null) {
      this.start_key = args.start_key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start_key is unset!');
    }
    if (args.end_key !== undefined && args.end_key !== null) {
      this.end_key = args.end_key;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
GetRangeRequest.prototype = {};
GetRangeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRangeRequest.prototype.write = function(output) {
  output.writeStructBegin('GetRangeRequest');
  if (this.start_key !== null && this.start_key !== undefined) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 1);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.end_key !== null && this.end_key !== undefined) {
    output.writeFieldBegin('end_key', Thrift.Type.STRING, 2);
    output.writeString(this.end_key);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 4);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var KeyValue = module.exports.KeyValue = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
KeyValue.prototype = {};
KeyValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

KeyValue.prototype.write = function(output) {
  output.writeStructBegin('KeyValue');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetRangeResponse = module.exports.GetRangeResponse = function(args) {
  this.key_values = null;
  this.success = null;
  this.error = null;
  if (args) {
    if (args.key_values !== undefined && args.key_values !== null) {
      this.key_values = Thrift.copyList(args.key_values, [ttypes.KeyValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key_values is unset!');
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
GetRangeResponse.prototype = {};
GetRangeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.key_values = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.KeyValue();
          elem3.read(input);
          this.key_values.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetRangeResponse.prototype.write = function(output) {
  output.writeStructBegin('GetRangeResponse');
  if (this.key_values !== null && this.key_values !== undefined) {
    output.writeFieldBegin('key_values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.key_values.length);
    for (var iter4 in this.key_values) {
      if (this.key_values.hasOwnProperty(iter4)) {
        iter4 = this.key_values[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapshotGetRequest = module.exports.SnapshotGetRequest = function(args) {
  this.key = null;
  this.read_version = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.read_version !== undefined && args.read_version !== null) {
      this.read_version = args.read_version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_version is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
SnapshotGetRequest.prototype = {};
SnapshotGetRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.read_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotGetRequest.prototype.write = function(output) {
  output.writeStructBegin('SnapshotGetRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.read_version !== null && this.read_version !== undefined) {
    output.writeFieldBegin('read_version', Thrift.Type.I64, 2);
    output.writeI64(this.read_version);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapshotGetResponse = module.exports.SnapshotGetResponse = function(args) {
  this.value = null;
  this.found = null;
  this.error = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field found is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SnapshotGetResponse.prototype = {};
SnapshotGetResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotGetResponse.prototype.write = function(output) {
  output.writeStructBegin('SnapshotGetResponse');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapshotGetRangeRequest = module.exports.SnapshotGetRangeRequest = function(args) {
  this.start_key = null;
  this.end_key = null;
  this.read_version = null;
  this.limit = 1000;
  this.column_family = null;
  if (args) {
    if (args.start_key !== undefined && args.start_key !== null) {
      this.start_key = args.start_key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start_key is unset!');
    }
    if (args.end_key !== undefined && args.end_key !== null) {
      this.end_key = args.end_key;
    }
    if (args.read_version !== undefined && args.read_version !== null) {
      this.read_version = args.read_version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_version is unset!');
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
SnapshotGetRangeRequest.prototype = {};
SnapshotGetRangeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.read_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotGetRangeRequest.prototype.write = function(output) {
  output.writeStructBegin('SnapshotGetRangeRequest');
  if (this.start_key !== null && this.start_key !== undefined) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 1);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.end_key !== null && this.end_key !== undefined) {
    output.writeFieldBegin('end_key', Thrift.Type.STRING, 2);
    output.writeString(this.end_key);
    output.writeFieldEnd();
  }
  if (this.read_version !== null && this.read_version !== undefined) {
    output.writeFieldBegin('read_version', Thrift.Type.I64, 3);
    output.writeI64(this.read_version);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 4);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 5);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapshotGetRangeResponse = module.exports.SnapshotGetRangeResponse = function(args) {
  this.key_values = null;
  this.success = null;
  this.error = null;
  if (args) {
    if (args.key_values !== undefined && args.key_values !== null) {
      this.key_values = Thrift.copyList(args.key_values, [ttypes.KeyValue]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key_values is unset!');
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SnapshotGetRangeResponse.prototype = {};
SnapshotGetRangeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.key_values = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.KeyValue();
          elem8.read(input);
          this.key_values.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotGetRangeResponse.prototype.write = function(output) {
  output.writeStructBegin('SnapshotGetRangeResponse');
  if (this.key_values !== null && this.key_values !== undefined) {
    output.writeFieldBegin('key_values', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.key_values.length);
    for (var iter9 in this.key_values) {
      if (this.key_values.hasOwnProperty(iter9)) {
        iter9 = this.key_values[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddReadConflictRequest = module.exports.AddReadConflictRequest = function(args) {
  this.key = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
AddReadConflictRequest.prototype = {};
AddReadConflictRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddReadConflictRequest.prototype.write = function(output) {
  output.writeStructBegin('AddReadConflictRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 2);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddReadConflictResponse = module.exports.AddReadConflictResponse = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AddReadConflictResponse.prototype = {};
AddReadConflictResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddReadConflictResponse.prototype.write = function(output) {
  output.writeStructBegin('AddReadConflictResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddReadConflictRangeRequest = module.exports.AddReadConflictRangeRequest = function(args) {
  this.start_key = null;
  this.end_key = null;
  this.column_family = null;
  if (args) {
    if (args.start_key !== undefined && args.start_key !== null) {
      this.start_key = args.start_key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start_key is unset!');
    }
    if (args.end_key !== undefined && args.end_key !== null) {
      this.end_key = args.end_key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field end_key is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
AddReadConflictRangeRequest.prototype = {};
AddReadConflictRangeRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddReadConflictRangeRequest.prototype.write = function(output) {
  output.writeStructBegin('AddReadConflictRangeRequest');
  if (this.start_key !== null && this.start_key !== undefined) {
    output.writeFieldBegin('start_key', Thrift.Type.STRING, 1);
    output.writeString(this.start_key);
    output.writeFieldEnd();
  }
  if (this.end_key !== null && this.end_key !== undefined) {
    output.writeFieldBegin('end_key', Thrift.Type.STRING, 2);
    output.writeString(this.end_key);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddReadConflictRangeResponse = module.exports.AddReadConflictRangeResponse = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
AddReadConflictRangeResponse.prototype = {};
AddReadConflictRangeResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddReadConflictRangeResponse.prototype.write = function(output) {
  output.writeStructBegin('AddReadConflictRangeResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetReadVersionRequest = module.exports.SetReadVersionRequest = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
  }
};
SetReadVersionRequest.prototype = {};
SetReadVersionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetReadVersionRequest.prototype.write = function(output) {
  output.writeStructBegin('SetReadVersionRequest');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetReadVersionResponse = module.exports.SetReadVersionResponse = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SetReadVersionResponse.prototype = {};
SetReadVersionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetReadVersionResponse.prototype.write = function(output) {
  output.writeStructBegin('SetReadVersionResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCommittedVersionRequest = module.exports.GetCommittedVersionRequest = function(args) {
};
GetCommittedVersionRequest.prototype = {};
GetCommittedVersionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCommittedVersionRequest.prototype.write = function(output) {
  output.writeStructBegin('GetCommittedVersionRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCommittedVersionResponse = module.exports.GetCommittedVersionResponse = function(args) {
  this.version = null;
  this.success = null;
  this.error = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
GetCommittedVersionResponse.prototype = {};
GetCommittedVersionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCommittedVersionResponse.prototype.write = function(output) {
  output.writeStructBegin('GetCommittedVersionResponse');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 1);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetVersionstampedKeyRequest = module.exports.SetVersionstampedKeyRequest = function(args) {
  this.key_prefix = null;
  this.value = null;
  this.column_family = null;
  if (args) {
    if (args.key_prefix !== undefined && args.key_prefix !== null) {
      this.key_prefix = args.key_prefix;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key_prefix is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
SetVersionstampedKeyRequest.prototype = {};
SetVersionstampedKeyRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key_prefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetVersionstampedKeyRequest.prototype.write = function(output) {
  output.writeStructBegin('SetVersionstampedKeyRequest');
  if (this.key_prefix !== null && this.key_prefix !== undefined) {
    output.writeFieldBegin('key_prefix', Thrift.Type.STRING, 1);
    output.writeString(this.key_prefix);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetVersionstampedKeyResponse = module.exports.SetVersionstampedKeyResponse = function(args) {
  this.generated_key = null;
  this.success = null;
  this.error = null;
  if (args) {
    if (args.generated_key !== undefined && args.generated_key !== null) {
      this.generated_key = args.generated_key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field generated_key is unset!');
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SetVersionstampedKeyResponse.prototype = {};
SetVersionstampedKeyResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.generated_key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetVersionstampedKeyResponse.prototype.write = function(output) {
  output.writeStructBegin('SetVersionstampedKeyResponse');
  if (this.generated_key !== null && this.generated_key !== undefined) {
    output.writeFieldBegin('generated_key', Thrift.Type.STRING, 1);
    output.writeString(this.generated_key);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetVersionstampedValueRequest = module.exports.SetVersionstampedValueRequest = function(args) {
  this.key = null;
  this.value_prefix = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.value_prefix !== undefined && args.value_prefix !== null) {
      this.value_prefix = args.value_prefix;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value_prefix is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
SetVersionstampedValueRequest.prototype = {};
SetVersionstampedValueRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value_prefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetVersionstampedValueRequest.prototype.write = function(output) {
  output.writeStructBegin('SetVersionstampedValueRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value_prefix !== null && this.value_prefix !== undefined) {
    output.writeFieldBegin('value_prefix', Thrift.Type.STRING, 2);
    output.writeString(this.value_prefix);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetVersionstampedValueResponse = module.exports.SetVersionstampedValueResponse = function(args) {
  this.generated_value = null;
  this.success = null;
  this.error = null;
  if (args) {
    if (args.generated_value !== undefined && args.generated_value !== null) {
      this.generated_value = args.generated_value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field generated_value is unset!');
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SetVersionstampedValueResponse.prototype = {};
SetVersionstampedValueResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.generated_value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetVersionstampedValueResponse.prototype.write = function(output) {
  output.writeStructBegin('SetVersionstampedValueResponse');
  if (this.generated_value !== null && this.generated_value !== undefined) {
    output.writeFieldBegin('generated_value', Thrift.Type.STRING, 1);
    output.writeString(this.generated_value);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FaultInjectionRequest = module.exports.FaultInjectionRequest = function(args) {
  this.fault_type = null;
  this.probability = 0.0000000000000000;
  this.duration_ms = 0;
  this.target_operation = null;
  if (args) {
    if (args.fault_type !== undefined && args.fault_type !== null) {
      this.fault_type = args.fault_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fault_type is unset!');
    }
    if (args.probability !== undefined && args.probability !== null) {
      this.probability = args.probability;
    }
    if (args.duration_ms !== undefined && args.duration_ms !== null) {
      this.duration_ms = args.duration_ms;
    }
    if (args.target_operation !== undefined && args.target_operation !== null) {
      this.target_operation = args.target_operation;
    }
  }
};
FaultInjectionRequest.prototype = {};
FaultInjectionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fault_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.probability = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.duration_ms = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.target_operation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FaultInjectionRequest.prototype.write = function(output) {
  output.writeStructBegin('FaultInjectionRequest');
  if (this.fault_type !== null && this.fault_type !== undefined) {
    output.writeFieldBegin('fault_type', Thrift.Type.STRING, 1);
    output.writeString(this.fault_type);
    output.writeFieldEnd();
  }
  if (this.probability !== null && this.probability !== undefined) {
    output.writeFieldBegin('probability', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.probability);
    output.writeFieldEnd();
  }
  if (this.duration_ms !== null && this.duration_ms !== undefined) {
    output.writeFieldBegin('duration_ms', Thrift.Type.I32, 3);
    output.writeI32(this.duration_ms);
    output.writeFieldEnd();
  }
  if (this.target_operation !== null && this.target_operation !== undefined) {
    output.writeFieldBegin('target_operation', Thrift.Type.STRING, 4);
    output.writeString(this.target_operation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FaultInjectionResponse = module.exports.FaultInjectionResponse = function(args) {
  this.success = null;
  this.error = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
FaultInjectionResponse.prototype = {};
FaultInjectionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FaultInjectionResponse.prototype.write = function(output) {
  output.writeStructBegin('FaultInjectionResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Operation = module.exports.Operation = function(args) {
  this.type = null;
  this.key = null;
  this.value = null;
  this.column_family = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
Operation.prototype = {};
Operation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Operation.prototype.write = function(output) {
  output.writeStructBegin('Operation');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 4);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AtomicCommitRequest = module.exports.AtomicCommitRequest = function(args) {
  this.read_version = null;
  this.operations = null;
  this.read_conflict_keys = null;
  this.timeout_seconds = new Int64(60);
  if (args) {
    if (args.read_version !== undefined && args.read_version !== null) {
      this.read_version = args.read_version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_version is unset!');
    }
    if (args.operations !== undefined && args.operations !== null) {
      this.operations = Thrift.copyList(args.operations, [ttypes.Operation]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operations is unset!');
    }
    if (args.read_conflict_keys !== undefined && args.read_conflict_keys !== null) {
      this.read_conflict_keys = Thrift.copyList(args.read_conflict_keys, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_conflict_keys is unset!');
    }
    if (args.timeout_seconds !== undefined && args.timeout_seconds !== null) {
      this.timeout_seconds = args.timeout_seconds;
    }
  }
};
AtomicCommitRequest.prototype = {};
AtomicCommitRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.read_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.operations = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.Operation();
          elem13.read(input);
          this.operations.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.read_conflict_keys = [];
        var _rtmp315 = input.readListBegin();
        var _size14 = _rtmp315.size || 0;
        for (var _i16 = 0; _i16 < _size14; ++_i16) {
          var elem17 = null;
          elem17 = input.readString();
          this.read_conflict_keys.push(elem17);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timeout_seconds = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AtomicCommitRequest.prototype.write = function(output) {
  output.writeStructBegin('AtomicCommitRequest');
  if (this.read_version !== null && this.read_version !== undefined) {
    output.writeFieldBegin('read_version', Thrift.Type.I64, 1);
    output.writeI64(this.read_version);
    output.writeFieldEnd();
  }
  if (this.operations !== null && this.operations !== undefined) {
    output.writeFieldBegin('operations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.operations.length);
    for (var iter18 in this.operations) {
      if (this.operations.hasOwnProperty(iter18)) {
        iter18 = this.operations[iter18];
        iter18.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.read_conflict_keys !== null && this.read_conflict_keys !== undefined) {
    output.writeFieldBegin('read_conflict_keys', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.read_conflict_keys.length);
    for (var iter19 in this.read_conflict_keys) {
      if (this.read_conflict_keys.hasOwnProperty(iter19)) {
        iter19 = this.read_conflict_keys[iter19];
        output.writeString(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeout_seconds !== null && this.timeout_seconds !== undefined) {
    output.writeFieldBegin('timeout_seconds', Thrift.Type.I64, 4);
    output.writeI64(this.timeout_seconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AtomicCommitResponse = module.exports.AtomicCommitResponse = function(args) {
  this.success = null;
  this.error = null;
  this.error_code = null;
  this.committed_version = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error_code !== undefined && args.error_code !== null) {
      this.error_code = args.error_code;
    }
    if (args.committed_version !== undefined && args.committed_version !== null) {
      this.committed_version = args.committed_version;
    }
  }
};
AtomicCommitResponse.prototype = {};
AtomicCommitResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.committed_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AtomicCommitResponse.prototype.write = function(output) {
  output.writeStructBegin('AtomicCommitResponse');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.STRING, 3);
    output.writeString(this.error_code);
    output.writeFieldEnd();
  }
  if (this.committed_version !== null && this.committed_version !== undefined) {
    output.writeFieldBegin('committed_version', Thrift.Type.I64, 4);
    output.writeI64(this.committed_version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetReadVersionRequest = module.exports.GetReadVersionRequest = function(args) {
};
GetReadVersionRequest.prototype = {};
GetReadVersionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetReadVersionRequest.prototype.write = function(output) {
  output.writeStructBegin('GetReadVersionRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetReadVersionResponse = module.exports.GetReadVersionResponse = function(args) {
  this.read_version = null;
  this.success = null;
  this.error = null;
  if (args) {
    if (args.read_version !== undefined && args.read_version !== null) {
      this.read_version = args.read_version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_version is unset!');
    }
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
GetReadVersionResponse.prototype = {};
GetReadVersionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.read_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetReadVersionResponse.prototype.write = function(output) {
  output.writeStructBegin('GetReadVersionResponse');
  if (this.read_version !== null && this.read_version !== undefined) {
    output.writeFieldBegin('read_version', Thrift.Type.I64, 1);
    output.writeI64(this.read_version);
    output.writeFieldEnd();
  }
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 2);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapshotReadRequest = module.exports.SnapshotReadRequest = function(args) {
  this.key = null;
  this.read_version = null;
  this.column_family = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field key is unset!');
    }
    if (args.read_version !== undefined && args.read_version !== null) {
      this.read_version = args.read_version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field read_version is unset!');
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
  }
};
SnapshotReadRequest.prototype = {};
SnapshotReadRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.read_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotReadRequest.prototype.write = function(output) {
  output.writeStructBegin('SnapshotReadRequest');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.read_version !== null && this.read_version !== undefined) {
    output.writeFieldBegin('read_version', Thrift.Type.I64, 2);
    output.writeI64(this.read_version);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 3);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnapshotReadResponse = module.exports.SnapshotReadResponse = function(args) {
  this.value = null;
  this.found = null;
  this.error = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field found is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
SnapshotReadResponse.prototype = {};
SnapshotReadResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnapshotReadResponse.prototype.write = function(output) {
  output.writeStructBegin('SnapshotReadResponse');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 3);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PingRequest = module.exports.PingRequest = function(args) {
  this.message = null;
  this.timestamp = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
PingRequest.prototype = {};
PingRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PingRequest.prototype.write = function(output) {
  output.writeStructBegin('PingRequest');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PingResponse = module.exports.PingResponse = function(args) {
  this.message = null;
  this.timestamp = null;
  this.server_timestamp = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.server_timestamp !== undefined && args.server_timestamp !== null) {
      this.server_timestamp = args.server_timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field server_timestamp is unset!');
    }
  }
};
PingResponse.prototype = {};
PingResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.server_timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PingResponse.prototype.write = function(output) {
  output.writeStructBegin('PingResponse');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.server_timestamp !== null && this.server_timestamp !== undefined) {
    output.writeFieldBegin('server_timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.server_timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

