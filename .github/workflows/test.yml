name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-rust:
    name: Test Rust
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cargo/registry
          ~/.cargo/git
        key: system-deps-${{ runner.os }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
        restore-keys: |
          system-deps-${{ runner.os }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler thrift-compiler librocksdb-dev cmake build-essential

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: false  # We'll handle caching manually for better control

    - name: Cache Rust build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/target/
        key: rust-build-${{ runner.os }}-${{ hashFiles('rust/**/Cargo.lock', 'rust/**/Cargo.toml') }}-${{ hashFiles('rust/src/**/*.rs', 'rust/crates/**/*.rs') }}
        restore-keys: |
          rust-build-${{ runner.os }}-${{ hashFiles('rust/**/Cargo.lock', 'rust/**/Cargo.toml') }}-
          rust-build-${{ runner.os }}-

    - name: Cache CMake build directory
      uses: actions/cache@v4
      with:
        path: |
          build
          rust/src/generated
          nodejs/generated
        key: cmake-build-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', 'thrift/**', 'proto/**') }}
        restore-keys: |
          cmake-build-${{ runner.os }}-

    - name: Build everything with CMake
      run: |
        cmake -B build -S .
        cmake --build build

    - name: Run Rust tests (excluding client integration tests)
      run: |
        cd rust
        # Run tests excluding client integration tests that require a server
        # This excludes the client_integration_tests which need localhost:9090
        # Also exclude RSML features since private submodule is not available in CI
        cargo test --workspace --lib --bins --no-default-features --features ffi
        cargo test --test consensus_tests --no-default-features --features ffi

  test-benchmark:
    name: Test Benchmark (Shard Server)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cargo/registry
          ~/.cargo/git
        key: system-deps-${{ runner.os }}-${{ hashFiles('**/Cargo.toml', '**/Cargo.lock') }}
        restore-keys: |
          system-deps-${{ runner.os }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler thrift-compiler librocksdb-dev cmake build-essential

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        cache: false  # We'll handle caching manually for better control

    - name: Cache Rust build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          rust/target/
        key: rust-build-${{ runner.os }}-${{ hashFiles('rust/**/Cargo.lock', 'rust/**/Cargo.toml') }}-${{ hashFiles('rust/src/**/*.rs', 'rust/crates/**/*.rs') }}
        restore-keys: |
          rust-build-${{ runner.os }}-${{ hashFiles('rust/**/Cargo.lock', 'rust/**/Cargo.toml') }}-
          rust-build-${{ runner.os }}-

    - name: Cache CMake build directory
      uses: actions/cache@v4
      with:
        path: |
          build
          rust/src/generated
          nodejs/generated
        key: cmake-build-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', 'thrift/**', 'proto/**') }}
        restore-keys: |
          cmake-build-${{ runner.os }}-

    - name: Build everything with CMake
      run: |
        cmake -B build -S .
        cmake --build build

    - name: Run benchmark crate tests
      env:
        SHARD_SERVER_BIN: ./build/bin/shard-server
      run: |
        cd rust
        cargo test -p kv-benchmark --verbose -- --nocapture

  test-nodejs:
    name: Test Node.js Web Dashboard
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler thrift-compiler

    - name: Cache CMake build directory
      uses: actions/cache@v4
      with:
        path: |
          build
          nodejs/generated
          nodejs/thrift
        key: cmake-build-nodejs-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', 'thrift/**') }}
        restore-keys: |
          cmake-build-nodejs-${{ runner.os }}-

    - name: Build everything with CMake
      run: |
        cmake -B build -S .
        cmake --build build

    - name: Copy generated files to expected location
      run: |
        mkdir -p nodejs/thrift
        cp nodejs/generated/*.js nodejs/thrift/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: nodejs/package-lock.json

    - name: Install Node.js dependencies
      run: |
        cd nodejs
        npm ci

    - name: Run Node.js tests
      run: |
        cd nodejs
        npm test
      env:
        NODE_ENV: test
